<mah:MetroWindow x:Class="Monopoly.Game.MonopolyWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:mah="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
        xmlns:dialog="clr-namespace:MahApps.Metro.Controls.Dialogs;assembly=MahApps.Metro"
        xmlns:icons="http://metro.mahapps.com/winfx/xaml/iconpacks"
        xmlns:parent="clr-namespace:Monopoly"
        xmlns:local="clr-namespace:Monopoly.Game"
        xmlns:conv="clr-namespace:Monopoly.Converters"
        mc:Ignorable="d" 
                 
        dialog:DialogParticipation.Register="{Binding Handler}"
                 
        Background="#8FD5A6" TitleCharacterCasing="Normal"
        WindowState="Maximized" Icon="/Monopoly;component/Resources/Images/Icon.png"
        Title="Monopoly" MinHeight="450" MinWidth="800">

    <!-- Define information about the window headbar -->
    <!-- Draw the icon -->
    <mah:MetroWindow.IconTemplate>
        <DataTemplate>
            <Grid Background="#22000000" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                <Image Source="/Monopoly;component/Resources/Images/IconWhiteout.png" Margin="3"/>
            </Grid>
        </DataTemplate>
    </mah:MetroWindow.IconTemplate>

    <!-- Window interaction triggers (referencing Microsoft.Xaml.Behaviors.Wpf) -->
    <i:Interaction.Triggers>
        <!-- When the mouse moves, call the appropriate command for visual effect -->
        <i:EventTrigger EventName="MouseMove">
            <i:InvokeCommandAction Command="{Binding MouseMove}" CommandParameter="{Binding ElementName=BoardViewbox}"/>
        </i:EventTrigger>
    </i:Interaction.Triggers>

    <!-- Add relevant resources -->
    <mah:MetroWindow.Resources>
        <parent:LobbyImageConverter x:Key="LobbyImageConverter"/>
        <parent:EqualityConverter x:Key="EqualityConverter"/>
        <parent:DiceNumberConverter x:Key="DiceNumberConverter"/>
    </mah:MetroWindow.Resources>

    <!-- Parent grid -->
    <!-- Grid for the board-->
    <Grid>
        <!-- Resource definition -->
        <Grid.Resources>
            <!-- Define the converters for this region -->
            <conv:BoardColumnConverter x:Key="BoardColumnConverter"/>
            <conv:BoardRowConverter x:Key="BoardRowConverter"/>
            <conv:UtilitySymbolConverter x:Key="UtilitySymbolConverter"/>
            <conv:IsVisualPropertyNullConverter x:Key="IsVisualPropertyNullConverter"/>
            <conv:RentIndicator x:Key="RentIndicator"/>
            <!-- Define the button styles -->
            <Style x:Key="SidebarButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource MahApps.Styles.Button.Flat}">
                <Setter Property="Background" Value="{DynamicResource MahApps.Brushes.Accent2}"/>
                <Setter Property="Foreground" Value="White"/>
                <Style.Triggers>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Background" Value="{DynamicResource MahApps.Brushes.Accent3}"/>
                        <Setter Property="Foreground" Value="#99FFFFFF"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
        </Grid.Resources>

        <!-- Row definitions -->
        <Grid.RowDefinitions>
            <RowDefinition Height="10"/>
            <RowDefinition Height="11*"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="10"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="10"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="10"/>
            <RowDefinition Height="1.5*"/>
            <RowDefinition Height="10"/>
            <RowDefinition Height="2*"/>
            <RowDefinition Height="10"/>
            <RowDefinition Height="2*"/>
            <RowDefinition Height="10"/>
        </Grid.RowDefinitions>
        <!-- Column definitions -->
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="2*"/>
            <ColumnDefinition Width="6*"/>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="10"/>
        </Grid.ColumnDefinitions>

        <!-- Monopoly game board -->
        <Viewbox x:Name="BoardViewbox" Grid.RowSpan="100" Grid.ColumnSpan="100">

            <!-- To make the board move slightly as the mouse moves around, a purely visual touch -->
            <!-- This has no other purpose besides visual pleasure -->
            <Viewbox.RenderTransform>
                <TransformGroup>
                    <ScaleTransform x:Name="ConfigurableBoardScaleTransform"
                                    CenterX="{Binding MouseX, UpdateSourceTrigger=PropertyChanged}" CenterY="{Binding MouseY, UpdateSourceTrigger=PropertyChanged}"
                                    ScaleX="{Binding BoardScale, UpdateSourceTrigger=PropertyChanged}" ScaleY="{Binding BoardScale, UpdateSourceTrigger=PropertyChanged}"/>
                </TransformGroup>
            </Viewbox.RenderTransform>

            <Grid>
                <!-- Add certain style resources for use throughout -->
                <Grid.Resources>
                    <Style TargetType="{x:Type mah:Tile}">
                        <Setter Property="ToolTipService.InitialShowDelay" Value="2"/>
                    </Style>
                </Grid.Resources>

                <!-- Use a grid to allow for multiple child elements -->
                <!-- Draw the shadow underneath the board first -->
                <!-- This will also contain buttons on it, so it needs to be elongated in one direction only. -->
                <Grid Width="1000" Height="800" RenderTransformOrigin="0.5, 0.5">
                    <!-- Define grid columns to ensure the shadow drop doesn't overflow its shadow appearance -->
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="70"/>
                        <ColumnDefinition Width="0.525*"/>
                        <ColumnDefinition Width="13*"/>
                        <ColumnDefinition Width="1*"/>
                        <ColumnDefinition Width="40"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="24*"/>
                        <RowDefinition Height="1*"/>
                    </Grid.RowDefinitions>
                    <!-- Define the render transform -->
                    <Grid.RenderTransform>
                        <TransformGroup>
                            <!-- Skew the board to give an indication of 3D appearance -->
                            <!-- Also move the shadow a few pixels downwards (10) -->
                            <MatrixTransform Matrix="0.85 0.33 -0.85 0.33 0 10"/>
                        </TransformGroup>
                    </Grid.RenderTransform>
                    <!-- Provide some information about the current user above the grid -->
                    <DockPanel DataContext="{Binding Handler.CurrentPlayer}" HorizontalAlignment="Right" Margin="0,-35,7,0">
                        <!--<DockPanel.Effect>
                                This shadow colour MUST be converted first from RGB to sRGB!
                                The closest sRGB colour for B66F24 is DBAF69
                                <DropShadowEffect BlurRadius="0" ShadowDepth="40" Direction="225" Opacity="0.75" Color="#DBAF69"/>
                            </DockPanel.Effect>-->
                        <DockPanel.Resources>
                            <Style TargetType="{x:Type icons:PackIconMaterial}">
                                <Setter Property="Foreground" Value="#DEDFE1"/>
                                <Setter Property="Height" Value="36"/>
                                <Setter Property="Width" Value="40"/>
                                <Setter Property="Margin" Value="0,0,7,0"/>
                            </Style>
                            <Style TargetType="{x:Type TextBlock}">
                                <Setter Property="Foreground" Value="#DEDFE1"/>
                                <Setter Property="FontSize" Value="36"/>
                                <Setter Property="LineHeight" Value="38"/>
                                <Setter Property="LineStackingStrategy" Value="BlockLineHeight"/>
                                <Setter Property="Margin" Value="0,0,20,0"/>
                            </Style>
                        </DockPanel.Resources>
                        <!-- Give it the correct orientation -->
                        <DockPanel.LayoutTransform>
                            <RotateTransform Angle="-90"/>
                        </DockPanel.LayoutTransform>
                        <!-- Now add the elements -->
                        <icons:PackIconMaterial Kind="AccountArrowRightOutline" Foreground="White"/>
                        <TextBlock Text="{Binding Name, StringFormat=Your turn\, {0}!}" Foreground="White"/>
                        <icons:PackIconMaterial Kind="CashMultiple" Height="40"/>
                        <TextBlock Text="{Binding Balance, StringFormat={}{0:c0}}"/>
                        <icons:PackIconMaterial Kind="CardsOutline"/>
                        <TextBlock Text="{Binding InventoryCount, StringFormat={}{0} cards}"/>
                    </DockPanel>
                    <!-- Define the backdrop (shadow) effects -->
                    <Rectangle Fill="#B66F24" Grid.Column="2" Grid.RowSpan="3"/>
                </Grid>

                <!-- Then draw the ItemsControl board on top of it -->
                <ItemsControl Height="800" Width="800" ItemsSource="{Binding Handler.Board, UpdateSourceTrigger=PropertyChanged}" RenderTransformOrigin="0.5, 0.5">
                    <!-- Skew the board -->
                    <ItemsControl.RenderTransform>
                        <!-- Skew the board to give an indication of 3D appearance -->
                        <!-- Also move the actual board a few pixels upwards (-10) -->
                        <MatrixTransform Matrix="0.85 0.33 -0.85 0.33 0 -10"/>
                    </ItemsControl.RenderTransform>

                    <!-- Define resources (styles and triggers) for the board -->
                    <ItemsControl.Resources>

                        <!-- Define the border/background style first -->
                        <!-- We can also use this to highlight properties when needed (when the player is on them) -->
                        <Style x:Key="LocationStyle" TargetType="{x:Type Border}">
                            <Setter Property="Background" Value="{Binding PropertyBackground, FallbackValue=LightGray}"/>
                            <Setter Property="BorderThickness" Value="0.25"/>
                            <Setter Property="BorderBrush" Value="Black"/>
                            <Style.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" Value="DarkGray"/>
                                </Trigger>
                            </Style.Triggers>
                        </Style>

                        <!-- Transformation for the icons (e.g. stretching where needed) -->
                        <Style x:Key="IconsTransformationStyle" TargetType="{x:Type Control}">
                            <Setter Property="RenderTransformOrigin" Value="0.5, 0.5"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Position, Converter={StaticResource BoardColumnConverter}, UpdateSourceTrigger=PropertyChanged}" Value="0">
                                    <Setter Property="LayoutTransform">
                                        <Setter.Value>
                                            <MatrixTransform Matrix="1.66 0 0 0.65 0 0"/>
                                        </Setter.Value>
                                    </Setter>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Position, Converter={StaticResource BoardColumnConverter}, UpdateSourceTrigger=PropertyChanged}" Value="10">
                                    <Setter Property="LayoutTransform">
                                        <Setter.Value>
                                            <MatrixTransform Matrix="1.66 0 0 0.65 0 0"/>
                                        </Setter.Value>
                                    </Setter>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>

                        <!-- Completely organise the dices for all properties except the corners -->
                        <Style x:Key="PlayerIndicatorDice" TargetType="{x:Type icons:PackIconFontAwesome}">
                            <Setter Property="Margin" Value="0, -20"/>
                            <Setter Property="Grid.RowSpan" Value="3"/>
                            <Setter Property="Grid.ColumnSpan" Value="5"/>
                            <Setter Property="HorizontalAlignment" Value="Right"/>
                            <Setter Property="VerticalAlignment" Value="Bottom"/>
                            <Setter Property="Width" Value="24"/>
                            <Setter Property="Height" Value="24"/>
                            <Setter Property="Foreground" Value="{Binding Background, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Border}}, UpdateSourceTrigger=PropertyChanged}"/>
                            <Style.Triggers>
                                <!-- Positional (skew) correctors -->
                                <DataTrigger Binding="{Binding Position, Converter={StaticResource BoardColumnConverter}, UpdateSourceTrigger=PropertyChanged}" Value="0">
                                    <Setter Property="Margin" Value="0, -15"/>
                                    <Setter Property="LayoutTransform">
                                        <Setter.Value>
                                            <MatrixTransform Matrix="1.66 0 0 0.65 0 0"/>
                                        </Setter.Value>
                                    </Setter>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Position, Converter={StaticResource BoardColumnConverter}, UpdateSourceTrigger=PropertyChanged}" Value="10">
                                    <Setter Property="Margin" Value="0, -15"/>
                                    <Setter Property="LayoutTransform">
                                        <Setter.Value>
                                            <MatrixTransform Matrix="1.66 0 0 0.65 0 0"/>
                                        </Setter.Value>
                                    </Setter>
                                </DataTrigger>
                                <!-- Icons and symbols -->
                                <DataTrigger Binding="{Binding Occupants.Count, UpdateSourceTrigger=PropertyChanged}" Value="0">
                                    <Setter Property="Visibility" Value="Hidden"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Occupants.Count, UpdateSourceTrigger=PropertyChanged}" Value="1">
                                    <Setter Property="Kind" Value="DiceOneSolid"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Occupants.Count, UpdateSourceTrigger=PropertyChanged}" Value="2">
                                    <Setter Property="Kind" Value="DiceTwoSolid"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Occupants.Count, UpdateSourceTrigger=PropertyChanged}" Value="3">
                                    <Setter Property="Kind" Value="DiceThreeSolid"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Occupants.Count, UpdateSourceTrigger=PropertyChanged}" Value="4">
                                    <Setter Property="Kind" Value="DiceFourSolid"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Occupants.Count, UpdateSourceTrigger=PropertyChanged}" Value="5">
                                    <Setter Property="Kind" Value="DiceFiveSolid"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Occupants.Count, UpdateSourceTrigger=PropertyChanged}" Value="6">
                                    <Setter Property="Kind" Value="DiceSixSolid"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                        <!-- We must then additionally configure the corner tiles -->
                        <Style x:Key="CornerPlayerIndicatorDice" TargetType="{x:Type icons:PackIconFontAwesome}">
                            <Setter Property="Margin" Value="0, -20"/>
                            <Setter Property="HorizontalAlignment" Value="Right"/>
                            <Setter Property="VerticalAlignment" Value="Bottom"/>
                            <Setter Property="Width" Value="24"/>
                            <Setter Property="Height" Value="24"/>
                            <Setter Property="Foreground" Value="{Binding Background, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Border}}, UpdateSourceTrigger=PropertyChanged}"/>
                            <Style.Triggers>
                                <!-- Symbols -->
                                <DataTrigger Binding="{Binding Occupants.Count, UpdateSourceTrigger=PropertyChanged}" Value="0">
                                    <Setter Property="Visibility" Value="Hidden"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Occupants.Count, UpdateSourceTrigger=PropertyChanged}" Value="1">
                                    <Setter Property="Kind" Value="DiceOneSolid"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Occupants.Count, UpdateSourceTrigger=PropertyChanged}" Value="2">
                                    <Setter Property="Kind" Value="DiceTwoSolid"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Occupants.Count, UpdateSourceTrigger=PropertyChanged}" Value="3">
                                    <Setter Property="Kind" Value="DiceThreeSolid"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Occupants.Count, UpdateSourceTrigger=PropertyChanged}" Value="4">
                                    <Setter Property="Kind" Value="DiceFourSolid"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Occupants.Count, UpdateSourceTrigger=PropertyChanged}" Value="5">
                                    <Setter Property="Kind" Value="DiceFiveSolid"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Occupants.Count, UpdateSourceTrigger=PropertyChanged}" Value="6">
                                    <Setter Property="Kind" Value="DiceSixSolid"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>

                        <!-- Define how the residential properties are to appear on the board -->
                        <DataTemplate DataType="{x:Type local:Residence}">
                            <Border Style="{StaticResource LocationStyle}">
                                <Grid Background="Transparent">
                                    <!-- Establish mouse bindings that allow a property to be selected -->
                                    <Grid.InputBindings>
                                        <MouseBinding Gesture="LeftClick" Command="{Binding RelativeSource={RelativeSource AncestorType=Window, Mode=FindAncestor}, Path=DataContext.PropertyClicked}" CommandParameter="{Binding}"/>
                                    </Grid.InputBindings>
                                    <!-- Use RowDefinitions to draw the colours at the top of the position only -->
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="3*"/>
                                        <RowDefinition Height="12*"/>
                                    </Grid.RowDefinitions>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="0"/>
                                        <ColumnDefinition Width="1*"/>
                                        <ColumnDefinition Width="1*"/>
                                        <ColumnDefinition Width="1*"/>
                                        <ColumnDefinition Width="1*"/>
                                        <ColumnDefinition Width="0"/>
                                    </Grid.ColumnDefinitions>
                                    <!-- Draw the colours -->
                                    <Rectangle Fill="{Binding PropertyColour}" Grid.Row="0" Grid.ColumnSpan="5"/>
                                    <!-- Add an indicator to display how many players are playing -->
                                    <icons:PackIconFontAwesome Style="{StaticResource PlayerIndicatorDice}"/>
                                </Grid>
                            </Border>
                        </DataTemplate>

                        <!-- Define how the railway station properties are to appear on the board -->
                        <DataTemplate DataType="{x:Type local:Station}">
                            <Border Style="{StaticResource LocationStyle}">
                                <Grid Background="Transparent">
                                    <!-- Establish mouse bindings that allow a property to be selected -->
                                    <Grid.InputBindings>
                                        <MouseBinding Gesture="LeftClick" Command="{Binding RelativeSource={RelativeSource AncestorType=Window, Mode=FindAncestor}, Path=DataContext.PropertyClicked}" CommandParameter="{Binding}"/>
                                    </Grid.InputBindings>
                                    <!-- Draw the icon in the middle of the property -->
                                    <icons:PackIconWeatherIcons Kind="Train" Style="{StaticResource IconsTransformationStyle}" HorizontalAlignment="Center" VerticalAlignment="Center" Height="32" Width="32" Foreground="#33000000"/>
                                    <!-- Add an indicator to display how many players are playing -->
                                    <icons:PackIconFontAwesome Style="{StaticResource PlayerIndicatorDice}"/>
                                </Grid>
                            </Border>
                        </DataTemplate>

                        <!-- Define how the railway station properties are to appear on the board -->
                        <DataTemplate DataType="{x:Type local:Utility}">
                            <Border Style="{StaticResource LocationStyle}">
                                <Grid Background="Transparent">
                                    <!-- Establish mouse bindings that allow a property to be selected -->
                                    <Grid.InputBindings>
                                        <MouseBinding Gesture="LeftClick" Command="{Binding RelativeSource={RelativeSource AncestorType=Window, Mode=FindAncestor}, Path=DataContext.PropertyClicked}" CommandParameter="{Binding}"/>
                                    </Grid.InputBindings>
                                    <!-- Draw the icon in the middle of the property -->
                                    <icons:PackIconFontAwesome Kind="{Binding Symbol, Converter={StaticResource UtilitySymbolConverter}}" Style="{StaticResource IconsTransformationStyle}" HorizontalAlignment="Center" VerticalAlignment="Center" Height="32" Width="32" Foreground="#33000000"/>
                                    <!-- Add an indicator to display how many players are playing -->
                                    <icons:PackIconFontAwesome Style="{StaticResource PlayerIndicatorDice}"/>
                                </Grid>
                            </Border>
                        </DataTemplate>

                        <!-- Define how taxation tiles appear on the board -->
                        <DataTemplate DataType="{x:Type local:Tax}">
                            <Border Style="{StaticResource LocationStyle}">
                                <!-- Add an indicator to display how many players are playing -->
                                <icons:PackIconFontAwesome Style="{StaticResource PlayerIndicatorDice}"/>
                            </Border>
                        </DataTemplate>

                        <!-- Define how chance tiles appear on the board -->
                        <DataTemplate DataType="{x:Type local:Chance}">
                            <Border Style="{StaticResource LocationStyle}">
                                <!-- Add an indicator to display how many players are playing -->
                                <icons:PackIconFontAwesome Style="{StaticResource PlayerIndicatorDice}"/>
                            </Border>
                        </DataTemplate>

                        <!-- Define how community chest tiles appear on the board -->
                        <DataTemplate DataType="{x:Type local:CommunityChest}">
                            <Border Style="{StaticResource LocationStyle}">
                                <!-- Add an indicator to display how many players are playing -->
                                <icons:PackIconFontAwesome Style="{StaticResource PlayerIndicatorDice}"/>
                            </Border>
                        </DataTemplate>

                        <!-- Define the GO corner tile -->
                        <DataTemplate DataType="{x:Type local:Go}">
                            <Border Style="{StaticResource LocationStyle}">
                                <Grid>
                                    <icons:PackIconFeatherIcons Kind="ArrowDownLeft" HorizontalAlignment="Center" VerticalAlignment="Center" Width="32" Height="32" Foreground="#33000000"/>
                                    <!-- Add an indicator to display how many players on this corner -->
                                    <icons:PackIconFontAwesome Style="{StaticResource CornerPlayerIndicatorDice}"/>
                                </Grid>
                            </Border>
                        </DataTemplate>

                        <!-- Define the Jail/visiting tile -->
                        <DataTemplate DataType="{x:Type local:Jail}">
                            <Border Style="{StaticResource LocationStyle}">
                                <Grid>
                                    <!-- Line definitions for this tile -->
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="3*"/>
                                        <ColumnDefinition Width="1*"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="3*"/>
                                        <RowDefinition Height="1*"/>
                                    </Grid.RowDefinitions>
                                    <!-- Add the jail thing itself -->
                                    <Border DataContext="{Binding DataContext, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type mah:MetroWindow}}}" BorderThickness="0 0 0.25 0.25" BorderBrush="Black" Grid.Row="0">
                                        <Border.Style>
                                            <Style TargetType="{x:Type Border}">
                                                <Setter Property="Background" Value="LightGray"/>
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding Handler.CurrentPlayer.IsJailed}" Value="True">
                                                        <Setter Property="Background" Value="#FEFF99"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Border.Style>
                                    </Border>
                                    <!-- Add an indicator to display how many players on this corner -->
                                    <icons:PackIconFontAwesome Grid.RowSpan="2" Grid.Column="2" Style="{StaticResource CornerPlayerIndicatorDice}"/>
                                </Grid>
                            </Border>
                        </DataTemplate>

                        <!-- Define the Free Parking tile -->
                        <DataTemplate DataType="{x:Type local:FreeParking}">
                            <Border Style="{StaticResource LocationStyle}">
                                <!-- Add an indicator to display how many players on this corner -->
                                <icons:PackIconFontAwesome Style="{StaticResource CornerPlayerIndicatorDice}"/>
                            </Border>
                        </DataTemplate>

                        <!-- Define the Go To Jail tile -->
                        <DataTemplate DataType="{x:Type local:GoToJail}">
                            <Border Style="{StaticResource LocationStyle}">
                                <!-- Add an indicator to display how many players on this corner -->
                                <icons:PackIconFontAwesome Style="{StaticResource CornerPlayerIndicatorDice}"/>
                            </Border>
                        </DataTemplate>
                    </ItemsControl.Resources>

                    <!-- ItemsPanel used to lay out the board itself -->
                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <Grid Background="#DEDFE1">
                                <!-- Column and row definitions for the game -->
                                <!-- On a Monopoly grid, the proportions of W:H are 11:18 -->
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="18*"/>
                                    <ColumnDefinition Width="11*"/>
                                    <ColumnDefinition Width="11*"/>
                                    <ColumnDefinition Width="11*"/>
                                    <ColumnDefinition Width="11*"/>
                                    <ColumnDefinition Width="11*"/>
                                    <ColumnDefinition Width="11*"/>
                                    <ColumnDefinition Width="11*"/>
                                    <ColumnDefinition Width="11*"/>
                                    <ColumnDefinition Width="11*"/>
                                    <ColumnDefinition Width="18*"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="18*"/>
                                    <RowDefinition Height="11*"/>
                                    <RowDefinition Height="11*"/>
                                    <RowDefinition Height="11*"/>
                                    <RowDefinition Height="11*"/>
                                    <RowDefinition Height="11*"/>
                                    <RowDefinition Height="11*"/>
                                    <RowDefinition Height="11*"/>
                                    <RowDefinition Height="11*"/>
                                    <RowDefinition Height="11*"/>
                                    <RowDefinition Height="18*"/>
                                </Grid.RowDefinitions>
                                <!-- End column and row definitions -->
                            </Grid>

                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>

                    <!-- For the items themselves, they must be rotated and skewed in place to ensure that the board looks correct to the eye -->
                    <!-- To do this, we need to apply a ItemContainerStyle -->
                    <ItemsControl.ItemContainerStyle>
                        <Style>

                            <Setter Property="Grid.Column" Value="{Binding Position, Converter={StaticResource BoardColumnConverter}, UpdateSourceTrigger=PropertyChanged}"/>
                            <Setter Property="Grid.Row" Value="{Binding Position, Converter={StaticResource BoardRowConverter}, UpdateSourceTrigger=PropertyChanged}"/>

                            <!-- Data templates must be used to display the board properly -->
                            <!-- In order to rotate the properties correctly, it must be done based on their position through the converters -->
                            <!-- For example, if the converted index reveals that a property is along row 0 (the top row, north-east), it must be rotated 180 degrees -->

                            <Setter Property="Grid.RenderTransformOrigin" Value="0.5, 0.5"/>
                            <Style.Triggers>
                                <!-- Turn properties on north-west side of the grid 90 degrees -->
                                <DataTrigger Binding="{Binding Position, Converter={StaticResource BoardColumnConverter}, UpdateSourceTrigger=PropertyChanged}" Value="0">
                                    <Setter Property="Grid.RenderTransform">
                                        <Setter.Value>
                                            <TransformGroup>
                                                <RotateTransform Angle="90"/>
                                                <MatrixTransform Matrix="1.63636364 0 0 0.611111111 0 0"/>
                                            </TransformGroup>
                                        </Setter.Value>
                                    </Setter>
                                </DataTrigger>
                                <!-- Turn properties on the north-east side of the grid 180 degrees, upside down -->
                                <DataTrigger Binding="{Binding Position, Converter={StaticResource BoardRowConverter}, UpdateSourceTrigger=PropertyChanged}" Value="0">
                                    <Setter Property="Grid.RenderTransform">
                                        <Setter.Value>
                                            <RotateTransform Angle="180"/>
                                        </Setter.Value>
                                    </Setter>
                                </DataTrigger>
                                <!-- Turn properties on the south-east side of the grid 270 degrees -->
                                <DataTrigger Binding="{Binding Position, Converter={StaticResource BoardColumnConverter}, UpdateSourceTrigger=PropertyChanged}" Value="10">
                                    <Setter Property="Grid.RenderTransform">
                                        <Setter.Value>
                                            <TransformGroup>
                                                <RotateTransform Angle="270"/>
                                                <MatrixTransform Matrix="1.63636364 0 0 0.611111111 0 0"/>
                                            </TransformGroup>
                                        </Setter.Value>
                                    </Setter>
                                </DataTrigger>

                                <!-- However, the corner pieces (GO, Free Parking, Jail and Go To Jail) are exempt from such rotation needs -->
                                <!-- This is because their tiles are already square. As a result, their rotations must be reversed. -->

                                <!-- Reverse the rotation of closest, down-most square, applied from a previous DataTrigger -->
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding Position, Converter={StaticResource BoardRowConverter}, UpdateSourceTrigger=PropertyChanged}" Value="10"/>
                                        <Condition Binding="{Binding Position, Converter={StaticResource BoardColumnConverter}, UpdateSourceTrigger=PropertyChanged}" Value="10"/>
                                    </MultiDataTrigger.Conditions>
                                    <MultiDataTrigger.Setters>
                                        <Setter Property="Grid.RenderTransform">
                                            <Setter.Value>
                                                <RotateTransform Angle="0"/>
                                            </Setter.Value>
                                        </Setter>
                                    </MultiDataTrigger.Setters>
                                </MultiDataTrigger>

                                <!-- Reverse the rotation of the right-most square, applied from a previous DataTrigger -->
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding Position, Converter={StaticResource BoardRowConverter}, UpdateSourceTrigger=PropertyChanged}" Value="0"/>
                                        <Condition Binding="{Binding Position, Converter={StaticResource BoardColumnConverter}, UpdateSourceTrigger=PropertyChanged}" Value="10"/>
                                    </MultiDataTrigger.Conditions>
                                    <MultiDataTrigger.Setters>
                                        <Setter Property="Grid.RenderTransform">
                                            <Setter.Value>
                                                <RotateTransform Angle="270"/>
                                            </Setter.Value>
                                        </Setter>
                                    </MultiDataTrigger.Setters>
                                </MultiDataTrigger>

                                <!-- Reverse the rotation of the left-most square, applied from a previous DataTrigger -->
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding Position, Converter={StaticResource BoardRowConverter}, UpdateSourceTrigger=PropertyChanged}" Value="10"/>
                                        <Condition Binding="{Binding Position, Converter={StaticResource BoardColumnConverter}, UpdateSourceTrigger=PropertyChanged}" Value="0"/>
                                    </MultiDataTrigger.Conditions>
                                    <MultiDataTrigger.Setters>
                                        <Setter Property="Grid.RenderTransform">
                                            <Setter.Value>
                                                <RotateTransform Angle="90"/>
                                            </Setter.Value>
                                        </Setter>
                                    </MultiDataTrigger.Setters>
                                </MultiDataTrigger>

                            </Style.Triggers>
                        </Style>
                    </ItemsControl.ItemContainerStyle>

                </ItemsControl>

                <!-- Draw another grid on top of the item control to allow for the placement of controls in the middle of the board -->
                <!-- This is sized (585 side to 800 of the parent) to fit comfortably and exactly inside the inner board -->
                <Grid Background="Transparent" Width="585" Height="585" RenderTransformOrigin="0.5, 0.5">
                    <Grid.RenderTransform>
                        <TransformGroup>
                            <!-- Skew the board to give an indication of 3D appearance -->
                            <!-- Also move the square a few pixels upwards (-10) -->
                            <MatrixTransform Matrix="0.85 0.33 -0.85 0.33 0 -10"/>
                        </TransformGroup>
                    </Grid.RenderTransform>
                    <!-- For optimisation, we can define some properties here -->
                    <Grid.Resources>
                        <Style TargetType="{x:Type mah:Tile}">
                            <Setter Property="Width" Value="64"/>
                            <Setter Property="Height" Value="64"/>
                            <Setter Property="Margin" Value="3,3"/>
                            <Setter Property="Background" Value="Transparent"/>
                        </Style>
                        <Style TargetType="{x:Type icons:PackIconFontAwesome}">
                            <Setter Property="VerticalAlignment" Value="Center"/>
                            <Setter Property="Height" Value="12"/>
                        </Style>
                    </Grid.Resources>
                    <!-- Then we add the appropriate components: first, the rotate board button -->
                    <mah:Tile Command="{Binding RotateBoard}" Background="Transparent" Height="64" Width="64">
                        <mah:Tile.Style>
                            <Style TargetType="{x:Type mah:Tile}">
                                <Style.Triggers>
                                    <!-- Use the converter IsVisualPropertyNullConverter -->
                                    <DataTrigger Binding="{Binding SelectedProperty, Converter={StaticResource IsVisualPropertyNullConverter}, UpdateSourceTrigger=PropertyChanged}" Value="False">
                                        <Setter Property="Opacity" Value="0"/>
                                        <DataTrigger.EnterActions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation
                                                 Storyboard.TargetProperty="Opacity"
                                                 From="1" To="0" Duration="0:0:0.25" />
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </DataTrigger.EnterActions>
                                        <DataTrigger.ExitActions>
                                            <BeginStoryboard>
                                                <Storyboard FillBehavior="HoldEnd">
                                                    <DoubleAnimation
                                                 Storyboard.TargetProperty="Opacity"
                                                 BeginTime="0:0:0.25"
                                                 From="0" To="1" Duration="0:0:0.50" />
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </DataTrigger.ExitActions>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </mah:Tile.Style>
                        <icons:PackIconFontAwesome Foreground="LightGray" Kind="UndoSolid" HorizontalAlignment="Center" VerticalAlignment="Center" RotationAngle="{Binding RotateButtonRotation, UpdateSourceTrigger=PropertyChanged}" IsHitTestVisible="False" Height="48" Width="48"/>
                        <mah:Tile.ToolTip>
                            <DockPanel>
                                <icons:PackIconFontAwesome Kind="UndoSolid" Margin="2,0"/>
                                <TextBlock Text="Rotate the board 90 degrees anti-clockwise."/>
                            </DockPanel>
                        </mah:Tile.ToolTip>
                    </mah:Tile>
                </Grid>

                <!-- Then draw the controls that need to go on top of it all -->
                <!-- These must be drawn within the viewbox to ensure they 'stay in place' upon movement of the mouse -->
                <Grid HorizontalAlignment="Center" VerticalAlignment="Center" MinWidth="300" Margin="0,0,0,20">
                    <!-- Using a storyboard, this grid can be faded in and out when needed -->
                    <Grid.Style>
                        <Style TargetType="{x:Type Grid}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding SelectedProperty, Converter={StaticResource IsVisualPropertyNullConverter}, UpdateSourceTrigger=PropertyChanged}" Value="True">
                                    <Setter Property="Opacity" Value="0"/>
                                    <Setter Property="IsHitTestVisible" Value="False"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding SelectedProperty, Converter={StaticResource IsVisualPropertyNullConverter}, UpdateSourceTrigger=PropertyChanged}" Value="False">
                                    <Setter Property="IsHitTestVisible" Value="True"/>
                                    <DataTrigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation
                                                 Storyboard.TargetProperty="Opacity"
                                                 From="0" To="1" Duration="0:0:0.25" />
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </DataTrigger.EnterActions>
                                    <DataTrigger.ExitActions>
                                        <BeginStoryboard>
                                            <Storyboard FillBehavior="HoldEnd">
                                                <DoubleAnimation
                                                 Storyboard.TargetProperty="Opacity"
                                                 From="1" To="0" Duration="0:0:0.25" />
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </DataTrigger.ExitActions>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Grid.Style>
                    <!-- Use a grid to hold all of the items -->
                    <!-- Draw the details -->
                    <DockPanel Grid.Row="1" HorizontalAlignment="Center" VerticalAlignment="Center" Height="64" Margin="0,0,0,30">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="32"/>
                                <RowDefinition Height="38"/>
                            </Grid.RowDefinitions>
                            <ItemsControl ItemsSource="{Binding SelectedProperty, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource RentIndicator}}">
                                <!-- Use a dockpanel to place them neatly next to one another -->
                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <DockPanel HorizontalAlignment="Right" VerticalAlignment="Bottom" Margin="0" LastChildFill="False"/>
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>
                                <!-- Use styles to set the results depending on what the parameters are -->
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate>
                                        <Grid Width="16" Height="16">
                                            <Grid.Resources>
                                                <!-- For the notion of fully owned sets or mortgages -->
                                                <Style TargetType="{x:Type icons:PackIconTypicons}">
                                                    <Setter Property="Foreground" Value="DarkGray"/>
                                                    <Setter Property="Visibility" Value="Hidden"/>
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding Type}" Value="{x:Static local:DummyType.SetOwned}">
                                                            <Setter Property="Visibility" Value="Visible"/>
                                                            <Setter Property="Foreground" Value="#AA57B764"/>
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                                <!-- For the notion of houses -->
                                                <Style TargetType="{x:Type icons:PackIconMaterial}">
                                                    <Setter Property="Foreground" Value="DarkGray"/>
                                                    <Setter Property="Kind" Value="Home"/>
                                                    <Setter Property="Visibility" Value="Hidden"/>
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding Type}" Value="{x:Static local:DummyType.HouseUnowned}">
                                                            <Setter Property="Visibility" Value="Visible"/>
                                                        </DataTrigger>
                                                        <DataTrigger Binding="{Binding Type}" Value="{x:Static local:DummyType.HouseOwned}">
                                                            <Setter Property="Visibility" Value="Visible"/>
                                                            <Setter Property="Foreground" Value="#57B764"/>
                                                        </DataTrigger>
                                                        <DataTrigger Binding="{Binding Type}" Value="{x:Static local:DummyType.HotelUnowned}">
                                                            <Setter Property="Kind" Value="HomeGroup"/>
                                                            <Setter Property="Visibility" Value="Visible"/>
                                                        </DataTrigger>
                                                        <DataTrigger Binding="{Binding Type}" Value="{x:Static local:DummyType.HotelOwned}">
                                                            <Setter Property="Kind" Value="HomeGroup"/>
                                                            <Setter Property="Visibility" Value="Visible"/>
                                                            <Setter Property="Foreground" Value="#DE1A1C"/>
                                                        </DataTrigger>
                                                        <DataTrigger Binding="{Binding Type}" Value="{x:Static local:DummyType.UtilityUnowned}">
                                                            <Setter Property="Kind" Value="Flash"/>
                                                            <Setter Property="Visibility" Value="Visible"/>
                                                        </DataTrigger>
                                                        <DataTrigger Binding="{Binding Type}" Value="{x:Static local:DummyType.UtilityOwned}">
                                                            <Setter Property="Kind" Value="Flash"/>
                                                            <Setter Property="Visibility" Value="Visible"/>
                                                            <Setter Property="Foreground" Value="Gray"/>
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                                <!-- For the stations -->
                                                <Style TargetType="{x:Type icons:PackIconWeatherIcons}">
                                                    <Setter Property="Foreground" Value="DarkGray"/>
                                                    <Setter Property="Visibility" Value="Hidden"/>
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding Type}" Value="{x:Static local:DummyType.StationUnowned}">
                                                            <Setter Property="Visibility" Value="Visible"/>
                                                        </DataTrigger>
                                                        <DataTrigger Binding="{Binding Type}" Value="{x:Static local:DummyType.StationOwned}">
                                                            <Setter Property="Visibility" Value="Visible"/>
                                                            <Setter Property="Foreground" Value="Gray"/>
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </Grid.Resources>
                                            <icons:PackIconTypicons Kind="Tick" Width="12" HorizontalAlignment="Center" VerticalAlignment="Center">
                                                <icons:PackIconTypicons.ToolTip>
                                                    <DockPanel>
                                                        <icons:PackIconFontAwesome Kind="CheckCircleRegular"/>
                                                        <TextBlock Text=" This property's complete set has been collected!"/>
                                                    </DockPanel>
                                                </icons:PackIconTypicons.ToolTip>
                                            </icons:PackIconTypicons>
                                            <icons:PackIconMaterial/>
                                            <icons:PackIconWeatherIcons Kind="Train"/>
                                        </Grid>
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>
                            <TextBlock Grid.Row="2" Text="{Binding SelectedProperty.OwnerName}" FontSize="24" Foreground="DarkGray" TextAlignment="Right" LineStackingStrategy="BlockLineHeight" LineHeight="24"/>
                        </Grid>
                        <TextBlock Text="{Binding SelectedProperty.Name}" FontSize="48" Foreground="Gray" VerticalAlignment="Top" Margin="4,0,8,0" FontStyle="Normal"/>
                        <TextBlock FontSize="16" Margin="-4,0,0,9" VerticalAlignment="Bottom">
                            <TextBlock.Style>
                                <Style TargetType="{x:Type TextBlock}">
                                    <Setter Property="Foreground" Value="DarkGray"/>
                                    <Setter Property="Text" Value="{Binding SelectedProperty.Price, StringFormat={}{0:c0}}"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding SelectedProperty.IsMortgaged}" Value="True">
                                            <Setter Property="Foreground" Value="#DE1A1C"/>
                                            <Setter Property="Text" Value="mortgaged"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>
                    </DockPanel>
                    <!-- Draw the controls -->
                    <DockPanel Height="32" Margin="0,0,0,-42" HorizontalAlignment="Center" LastChildFill="False">
                        <DockPanel.Background>
                            <!-- Using a small gradient from total transparency to semi-transparency, we can ensure that any letters from the name do not obstruct view of the controls-->
                            <LinearGradientBrush EndPoint="0.5,0.66" StartPoint="0.5,0">
                                <GradientStop Color="#00dedfe1" Offset="0"/>
                                <GradientStop Color="#AAdedfe1" Offset="1"/>
                            </LinearGradientBrush>
                        </DockPanel.Background>
                        <!-- Then, within the DockPanel, we can establish controls for the view of a selected property -->
                        <DockPanel.Resources>
                            <Style TargetType="{x:Type mah:Tile}">
                                <Setter Property="Height" Value="24"/>
                                <Setter Property="Width" Value="24"/>
                                <Setter Property="Background" Value="Transparent"/>
                                <Setter Property="Margin" Value="0"/>
                                <Style.Triggers>
                                    <Trigger Property="IsEnabled" Value="False">
                                        <Setter Property="Width" Value="0"/>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                            <Style TargetType="{x:Type icons:PackIconMaterial}">
                                <Setter Property="VerticalAlignment" Value="Center"/>
                                <Setter Property="IsHitTestVisible" Value="False"/>
                                <Setter Property="Foreground" Value="Gray"/>
                                <Setter Property="Margin" Value="0"/>
                            </Style>
                            <Style TargetType="{x:Type icons:PackIconFontAwesome}">
                                <Setter Property="VerticalAlignment" Value="Center"/>
                                <Setter Property="Height" Value="12"/>
                            </Style>
                        </DockPanel.Resources>
                        <!-- Add the items themselves to allow for tile selection -->
                        <mah:Tile Command="{Binding NextProperty}" CommandParameter="Left">
                            <icons:PackIconMaterial Kind="ArrowLeft"/>
                            <mah:Tile.ToolTip>
                                <DockPanel>
                                    <icons:PackIconFontAwesome Kind="ArrowLeftSolid"/>
                                    <TextBlock Text=" Select the property to the left of this one."/>
                                </DockPanel>
                            </mah:Tile.ToolTip>
                        </mah:Tile>
                        <!-- These options should be available if the property is unowned by the applicable player -->
                        <mah:Tile Command="{Binding PurchaseProperty}">
                            <icons:PackIconMaterial Kind="CartArrowDown"/>
                            <mah:Tile.ToolTip>
                                <DockPanel>
                                    <icons:PackIconFontAwesome Kind="ShoppingCartSolid"/>
                                    <TextBlock Text=" Purchase the property!"/>
                                </DockPanel>
                            </mah:Tile.ToolTip>
                        </mah:Tile>
                        <mah:Tile Command="{Binding DeclineProperty}">
                            <icons:PackIconMaterial Kind="CartRemove"/>
                            <mah:Tile.ToolTip>
                                <DockPanel>
                                    <icons:PackIconFontAwesome Kind="TimesSolid"/>
                                    <TextBlock Text=" Reject this property and put it up for auction."/>
                                </DockPanel>
                            </mah:Tile.ToolTip>
                        </mah:Tile>
                        <mah:Tile Command="{Binding PayRent}">
                            <icons:PackIconMaterial Kind="CashUsdOutline"/>
                            <mah:Tile.ToolTip>
                                <DockPanel>
                                    <icons:PackIconFontAwesome Kind="CoinsSolid"/>
                                    <TextBlock Text=" Pay the due rent on this property."/>
                                </DockPanel>
                            </mah:Tile.ToolTip>
                        </mah:Tile>
                        <!-- Dismiss tile (middle) -->
                        <mah:Tile Command="{Binding DismissPropertyClicked}">
                            <icons:PackIconMaterial Kind="CloseCircleOutline" />
                            <mah:Tile.ToolTip>
                                <DockPanel>
                                    <icons:PackIconFontAwesome Kind="TimesSolid"/>
                                    <TextBlock Text=" Dismiss the selected property."/>
                                </DockPanel>
                            </mah:Tile.ToolTip>
                        </mah:Tile>
                        <!-- These options should be available is the property is owned by the player in question or always available -->
                        <mah:Tile>
                            <icons:PackIconMaterial Kind="SwapHorizontalBold"/>
                            <mah:Tile.ToolTip>
                                <DockPanel>
                                    <icons:PackIconFontAwesome Kind="ExchangeAltSolid"/>
                                    <TextBlock Text=" Propose a trade involving this property with another player."/>
                                </DockPanel>
                            </mah:Tile.ToolTip>
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="Click">
                                    <i:ChangePropertyAction TargetName="PartnerSelector" PropertyName="SelectedItem" Value="{x:Null}"/>
                                    <i:ChangePropertyAction TargetName="TradingFlyout" PropertyName="IsOpen" Value="True"/>
                                    <i:ChangePropertyAction TargetName="CurrentPlayerCashSelector" PropertyName="Value" Value="0"/>
                                    <i:ChangePropertyAction TargetName="TradingPlayerCashSelector" PropertyName="Value" Value="0"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </mah:Tile>
                        <mah:Tile Command="{Binding AddHouse}">
                            <icons:PackIconMaterial Kind="HomePlusOutline"/>
                            <mah:Tile.ToolTip>
                                <DockPanel>
                                    <icons:PackIconFontAwesome Kind="PlusSolid"/>
                                    <TextBlock Text=" Construct another house on this property."/>
                                </DockPanel>
                            </mah:Tile.ToolTip>
                        </mah:Tile>
                        <mah:Tile Command="{Binding RemoveHouse}">
                            <icons:PackIconMaterial Kind="HomeMinusOutline"/>
                            <mah:Tile.ToolTip>
                                <DockPanel>
                                    <icons:PackIconFontAwesome Kind="MinusSolid"/>
                                    <TextBlock Text=" Remove a constructed house on this property."/>
                                </DockPanel>
                            </mah:Tile.ToolTip>
                        </mah:Tile>
                        <mah:Tile Command="{Binding MortgageProperty}">
                            <icons:PackIconMaterial Kind="HomeRemoveOutline"/>
                            <mah:Tile.ToolTip>
                                <DockPanel>
                                    <icons:PackIconFontAwesome Kind="PiggyBankSolid"/>
                                    <TextBlock Text=" Mortgage this property."/>
                                </DockPanel>
                            </mah:Tile.ToolTip>
                        </mah:Tile>
                        <mah:Tile Command="{Binding UnmortgageProperty}">
                            <icons:PackIconMaterial Kind="HomeImportOutline"/>
                            <mah:Tile.ToolTip>
                                <DockPanel>
                                    <icons:PackIconFontAwesome Kind="HandHoldingUsdSolid"/>
                                    <TextBlock Text=" Unmortgage this property."/>
                                </DockPanel>
                            </mah:Tile.ToolTip>
                        </mah:Tile>
                        <!-- Next property -->
                        <mah:Tile Command="{Binding NextProperty}" CommandParameter="Right">
                            <icons:PackIconMaterial Kind="ArrowRight" />
                            <mah:Tile.ToolTip>
                                <DockPanel>
                                    <TextBlock Text="Select the property to the right of this one. "/>
                                    <icons:PackIconFontAwesome Kind="ArrowRightSolid"/>
                                </DockPanel>
                            </mah:Tile.ToolTip>
                        </mah:Tile>
                    </DockPanel>
                </Grid>

                <!-- Populate the board with the CURRENT PLAYER'S icon! -->
                <Image Source="{Binding Handler.CurrentPlayer.Icon, Converter={StaticResource LobbyImageConverter}}" Width="72" Margin="350,100,0,0">
                    <Image.Effect>
                        <DropShadowEffect Opacity="0.3" ShadowDepth="5" Direction="105"/>
                    </Image.Effect>
                </Image>
                <!-- Populate the board with another player icon! -->
                <Image Source="{Binding Handler.Players[1].Icon, Converter={StaticResource LobbyImageConverter}}" Width="48" Margin="0,-180,350,0">
                    <Image.Effect>
                        <DropShadowEffect Opacity="0.3" ShadowDepth="5" Direction="105"/>
                    </Image.Effect>
                </Image>
                <!-- Populate the board with another player icon! -->
                <Image Width="48" Margin="0,-165,240,0">
                    <Image.Style>
                        <Style TargetType="{x:Type Image}">
                            <Setter Property="Source" Value="{Binding Handler.Players[2].Icon, Converter={StaticResource LobbyImageConverter}}"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Handler.Players.Count}" Value="2">
                                    <Setter Property="Source" Value="{x:Null}"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Image.Style>
                    <Image.Effect>
                        <DropShadowEffect Opacity="0.3" ShadowDepth="5" Direction="105"/>
                    </Image.Effect>
                </Image>
            </Grid>

        </Viewbox>

        <!-- Add all the controls (buttons) where needed -->
        <Button Command="{Binding SaveQuit}" Grid.Column="2" Grid.Row="2" Style="{StaticResource SidebarButtonStyle}">
            <Viewbox>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="103"/>
                    </Grid.ColumnDefinitions>
                    <TextBlock Grid.Column="1" Text="Save game" VerticalAlignment="Center" />
                    <icons:PackIconFontAwesome Grid.Column="2" Kind="SaveSolid" VerticalAlignment="Center" HorizontalAlignment="Right"/>
                </Grid>
            </Viewbox>
        </Button>
        <Button Grid.Column="2" Grid.Row="4" Style="{StaticResource SidebarButtonStyle}">
            <Viewbox>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="103"/>
                    </Grid.ColumnDefinitions>
                    <TextBlock Grid.Column="1" Text="Begin trading" VerticalAlignment="Center" />
                    <icons:PackIconFontAwesome Grid.Column="2" Kind="ExchangeAltSolid" VerticalAlignment="Center" HorizontalAlignment="Right"/>
                </Grid>
            </Viewbox>
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="Click">
                    <i:ChangePropertyAction TargetName="PartnerSelector" PropertyName="SelectedItem" Value="{x:Null}"/>
                    <i:ChangePropertyAction TargetName="TradingFlyout" PropertyName="IsOpen" Value="True"/>
                    <i:ChangePropertyAction TargetName="CurrentPlayerCashSelector" PropertyName="Value" Value="0"/>
                    <i:ChangePropertyAction TargetName="TradingPlayerCashSelector" PropertyName="Value" Value="0"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>
        </Button>
        <Button Command="{Binding DeclareBankruptcy}" Grid.Column="2" Grid.Row="6" Style="{StaticResource SidebarButtonStyle}">
            <Viewbox>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="103"/>
                    </Grid.ColumnDefinitions>
                    <TextBlock Grid.Column="1" Text="I'm bankrupt!" VerticalAlignment="Center" />
                    <icons:PackIconFontAwesome Grid.Column="2" Kind="HouseDamageSolid" VerticalAlignment="Center" HorizontalAlignment="Right"/>
                </Grid>
            </Viewbox>
        </Button>
        <Button Style="{StaticResource SidebarButtonStyle}" Command="{Binding Handler.RollDice}" IsEnabled="{Binding Handler.RollsComplete}" Grid.Column="2" Grid.Row="8">
            <!-- Although we use an interaction trigger to control the flyout extending, we still need to 
                define a Command in order to allow the Handler to configure CanExecute() properly -->
            <Viewbox>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="103"/>
                    </Grid.ColumnDefinitions>
                    <TextBlock Grid.Column="1" Text="Roll dice!" FontSize="20" VerticalAlignment="Center" />
                    <icons:PackIconFontAwesome Grid.Column="2" Kind="DiceD6Solid" VerticalAlignment="Center" HorizontalAlignment="Right"/>
                </Grid>
            </Viewbox>
        </Button>
        <Viewbox Grid.Column="2" Grid.Row="10">
            <DockPanel DataContext="{Binding Handler}">
                <icons:PackIconFontAwesome Kind="{Binding Roll.Item1, Converter={StaticResource DiceNumberConverter}}" Margin="0,0,3,0"/>
                <icons:PackIconFontAwesome Kind="{Binding Roll.Item2, Converter={StaticResource DiceNumberConverter}}"/>
            </DockPanel>
        </Viewbox>
        <Button Command="{Binding NextTurn}" Grid.Column="2" Grid.Row="12">
            <Button.Style>
                <Style TargetType="{x:Type Button}" BasedOn="{StaticResource SidebarButtonStyle}">
                    <Setter Property="IsEnabled" Value="False"/>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding Handler.ActionsUnresolved}" Value="0">
                            <Setter Property="IsEnabled" Value="True"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Handler.AnimationOngoing}" Value="True">
                            <Setter Property="IsEnabled" Value="False"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Button.Style>
            <Grid Margin="5">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="2*"/>
                    <ColumnDefinition Width="32"/>
                </Grid.ColumnDefinitions>
                <Viewbox Grid.Column="0">
                    <TextBlock Text="Next turn" VerticalAlignment="Center"/>
                </Viewbox>
                <Viewbox Grid.Column="1" Margin="5,0,0,0">
                    <icons:PackIconFontAwesome Kind="AngleRightSolid" VerticalAlignment="Center" HorizontalAlignment="Right"/>
                </Viewbox>
            </Grid>
        </Button>

        <!-- Add a player list -->
        <Viewbox Grid.Row="8" Grid.RowSpan="5" HorizontalAlignment="Left" VerticalAlignment="Bottom">
            <ItemsControl ItemsSource="{Binding Handler.Players}">
                <!-- Use a stackpanel for the panel -->
                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <StackPanel/>
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
                <!-- Configure the datatemplate -->
                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <DockPanel Margin="0,5,0,0">
                            <DockPanel.Style>
                                <Style TargetType="{x:Type DockPanel}">
                                    <Setter Property="Background">
                                        <Setter.Value>
                                            <LinearGradientBrush StartPoint="0,1" EndPoint="1,1">
                                                <GradientStop Color="#FF57B764" Offset="0"/>
                                                <GradientStop Color="#0057B764" Offset="1"/>
                                            </LinearGradientBrush>
                                        </Setter.Value>
                                    </Setter>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Digit}" Value="-1">
                                            <Setter Property="Background">
                                                <Setter.Value>
                                                    <LinearGradientBrush StartPoint="0,1" EndPoint="1,1">
                                                        <GradientStop Color="#FFA57575" Offset="0"/>
                                                        <GradientStop Color="#00A57575" Offset="1"/>
                                                    </LinearGradientBrush>
                                                </Setter.Value>
                                            </Setter>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DockPanel.Style>

                            <TextBlock Text="{Binding Name}" VerticalAlignment="Center" FontSize="20" Margin="10,0,5,0"/>
                            <TextBlock VerticalAlignment="Bottom" Margin="0,3" FontStyle="Italic" FontSize="12">
                                <TextBlock.Style>
                                    <Style TargetType="{x:Type TextBlock}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Digit}" Value="-1">
                                                <Setter Property="Width" Value="0"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                                <Run Text="{Binding Balance, StringFormat={}{0:c0}}"/>
                                <icons:PackIconMaterial Height="9" Margin="0,0,-4,0">
                                    <icons:PackIconMaterial.Style>
                                        <Style TargetType="{x:Type icons:PackIconMaterial}">
                                            <Setter Property="Kind" Value="Cards"/>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding IsJailed, UpdateSourceTrigger=PropertyChanged}" Value="True">
                                                    <Setter Property="Kind" Value="PoliceBadge"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </icons:PackIconMaterial.Style>
                                </icons:PackIconMaterial>
                                <Run>
                                    <Run.Style>
                                        <Style TargetType="{x:Type Run}">
                                            <Setter Property="Text" Value="{Binding InventoryCount, Mode=OneWay}"/>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding IsJailed, UpdateSourceTrigger=PropertyChanged}" Value="True">
                                                    <Setter Property="Text" Value="Jailed"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Run.Style>
                                </Run>
                            </TextBlock>
                            <TextBlock Text="{Binding BalanceChanged, StringFormat={}{0:c0}, UpdateSourceTrigger=PropertyChanged, NotifyOnTargetUpdated=True}" VerticalAlignment="Bottom" Margin="2,3,-3,3" FontStyle="Italic">
                                <TextBlock.Style>
                                    <Style TargetType="{x:Type TextBlock}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Digit}" Value="-1">
                                                <Setter Property="Width" Value="0"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding BalanceChanged}" Value="0">
                                                <Setter Property="Width" Value="0"/>
                                            </DataTrigger>
                                            <EventTrigger RoutedEvent="Binding.TargetUpdated">
                                                <BeginStoryboard>
                                                    <Storyboard>
                                                        <!-- Make the object visible -->
                                                        <ObjectAnimationUsingKeyFrames BeginTime="00:00:0.0" Storyboard.TargetProperty="(UIElement.Visibility)">
                                                            <DiscreteObjectKeyFrame KeyTime="00:00:00" Value="{x:Static Visibility.Visible}"/>
                                                        </ObjectAnimationUsingKeyFrames>
                                                        <!-- Display the value -->
                                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" BeginTime="00:00:0.0" Duration="00:00:0.0" From="0" To="1" />
                                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" BeginTime="00:00:2.0" Duration="00:00:2.0" From="1" To="0" />
                                                        <!-- Collapse the obkect -->
                                                        <ObjectAnimationUsingKeyFrames BeginTime="00:00:4.0" Storyboard.TargetProperty="(UIElement.Visibility)">
                                                            <DiscreteObjectKeyFrame KeyTime="00:00:00" Value="{x:Static Visibility.Collapsed}"/>
                                                        </ObjectAnimationUsingKeyFrames>
                                                    </Storyboard>
                                                </BeginStoryboard>
                                            </EventTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>
                            <TextBlock Text="Bankrupt" VerticalAlignment="Bottom" Margin="0,3" FontStyle="Italic" FontSize="12">
                                <TextBlock.Style>
                                    <Style TargetType="{x:Type TextBlock}">
                                        <Setter Property="Width" Value="0"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Digit}" Value="-1">
                                                <Setter Property="Width" Value="Auto"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>
                            <Image Source="{Binding Icon, Converter={StaticResource LobbyImageConverter}}" Margin="10,-2" Height="32" HorizontalAlignment="Right"/>
                        </DockPanel>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>
        </Viewbox>

        <!-- We need a flyout for controlling auctions -->
        <mah:Flyout x:Name="AuctionFlyout" Position="Right" IsOpen="{Binding AuctionOngoing}" Grid.RowSpan="30" Grid.ColumnSpan="30" DataContext="{Binding Handler}" CloseButtonVisibility="Hidden" Width="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=mah:MetroWindow}, Path=ActualWidth}">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="80"/>
                </Grid.RowDefinitions>
                <!-- For the auction scroll list (bidding) -->
                <Viewbox>
                    <StackPanel>
                        <StackPanel.Resources>
                            <Style TargetType="{x:Type TextBlock}">
                                <Setter Property="HorizontalAlignment" Value="Center"/>
                            </Style>
                        </StackPanel.Resources>
                        <TextBlock Text="Auction ongoing" FontSize="18"/>
                        <TextBlock FontSize="14">
                                It is <Run Text="{Binding NextAuctionPlayer.Name}"/>'s turn to bid.
                        </TextBlock>
                        <TextBlock FontStyle="Italic" Foreground="DarkGray" FontSize="10">
                            <Run Text="{Binding SelectedProperty.Name}" DataContext="{Binding DataContext, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type mah:MetroWindow}}}"/>
                            is currently going for
                            £<Run Text="{Binding Handler.MaximumBid, Mode=OneWay}" DataContext="{Binding DataContext, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type mah:MetroWindow}}}"/>.
                        </TextBlock>
                        <Rectangle Height="10"/>
                        <ItemsControl ItemsSource="{Binding Bids, UpdateSourceTrigger=PropertyChanged}" Height="282">
                            <ItemsControl.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <StackPanel VerticalAlignment="Bottom"/>
                                </ItemsPanelTemplate>
                            </ItemsControl.ItemsPanel>
                            <ItemsControl.ItemTemplate>
                                <DataTemplate>
                                    <Grid Width="Auto" Margin="0,5,0,0">
                                        <Grid.Style>
                                            <Style TargetType="{x:Type Grid}">
                                                <Setter Property="Background" Value="#252525"/>
                                                <Setter Property="Height" Value="36"/>
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding Item2, Mode=OneWay}" Value="0">
                                                        <Setter Property="Background" Value="Transparent"/>
                                                        <Setter Property="Height" Value="20"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Grid.Style>
                                        <!-- Player image -->
                                        <Image Source="{Binding Item1.Icon, Converter={StaticResource LobbyImageConverter}}" HorizontalAlignment="Left" Margin="4"/>
                                        <!-- Text -->
                                        <TextBlock HorizontalAlignment="Right" Margin="4" FontSize="8">
                                            <TextBlock.Style>
                                                <Style TargetType="{x:Type TextBlock}">
                                                    <Setter Property="Foreground" Value="DarkGray"/>
                                                    <Setter Property="Text">
                                                        <Setter.Value>
                                                            <MultiBinding StringFormat="{}{0} has bid an additional £{1}.">
                                                                <!-- Format as you wish -->
                                                                <Binding Path="Item1.Name"/>
                                                                <Binding Path="Item2" Mode="OneWay"/>
                                                            </MultiBinding>
                                                        </Setter.Value>
                                                    </Setter>
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding Item2}" Value="0">
                                                            <Setter Property="Text" Value="{Binding Item1.Name, StringFormat={}{0} has withdrawn from the auction.}"/>
                                                        </DataTrigger>
                                                        <DataTrigger Binding="{Binding Item1}" Value="{x:Null}">
                                                            <Setter Property="Text" Value="Bidding over! The auction has ended!"/>
                                                            <Setter Property="Foreground" Value="White"/>
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </TextBlock.Style>
                                        </TextBlock>
                                        <TextBlock FontSize="11" HorizontalAlignment="Right" VerticalAlignment="Bottom" Margin="44,4,4,4">
                                            <TextBlock.Style>
                                                <Style TargetType="{x:Type TextBlock}">
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding Item1}" Value="{x:Null}">
                                                            <Setter Property="Opacity" Value="0"/>
                                                        </DataTrigger>
                                                        <DataTrigger Binding="{Binding Item2}" Value="0">
                                                            <Setter Property="Opacity" Value="0"/>
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </TextBlock.Style>
                                                <Run Text="{Binding SelectedProperty.Name}" DataContext="{Binding DataContext, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type mah:MetroWindow}}}"/>,
                                                usually £<Run Text="{Binding SelectedProperty.Price}" DataContext="{Binding DataContext, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type mah:MetroWindow}}}"/>,
                                                now going for £<Run Text="{Binding Handler.MaximumBid, Mode=OneTime}" DataContext="{Binding DataContext, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type mah:MetroWindow}}}"/>!
                                        </TextBlock>
                                    </Grid>
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </ItemsControl>
                    </StackPanel>
                </Viewbox>
                <!-- An image to show who's turn it is -->
                <!-- For the buttons underneath -->
                <Viewbox Grid.Row="1">
                    <DockPanel Margin="7.5">
                        <Image Source="{Binding NextAuctionPlayer.Icon, Converter={StaticResource LobbyImageConverter}}" Height="32"/>
                        <TextBlock Text="{Binding NextAuctionPlayer.Name, FallbackValue=Loading auction..., StringFormat={}{0}\'s turn to bid.}" FontWeight="SemiBold" VerticalAlignment="Center" Margin="3,0"/>
                        <mah:Tile Command="{Binding AddBidOne}" CommandParameter="1" Width="125" Height="24">
                            <DockPanel VerticalAlignment="Center">
                                <icons:PackIconMaterial Kind="CashPlus" Height="19" Margin="2.5,0"/>
                                <TextBlock Text="Increase bid by 1" Margin="2.5,0"/>
                            </DockPanel>
                        </mah:Tile>
                        <mah:Tile Command="{Binding AddBidTen}" CommandParameter="10" Width="130" Height="24">
                            <DockPanel VerticalAlignment="Center">
                                <icons:PackIconMaterial Kind="CashMultiple" Height="19" Margin="2.5,0"/>
                                <TextBlock Text="Increase bid by 10" Margin="2.5,0"/>
                            </DockPanel>
                        </mah:Tile>
                        <mah:Tile Command="{Binding AddBidOneHundred}" CommandParameter="100" Width="135" Height="24">
                            <DockPanel VerticalAlignment="Center">
                                <icons:PackIconMaterial Kind="Cash100" Height="19" Margin="2.5,0"/>
                                <TextBlock Text="Increase bid by 100" Margin="2.5,0"/>
                            </DockPanel>
                        </mah:Tile>
                        <mah:Tile Command="{Binding WithdrawAuction}" CommandParameter="0" Width="140" Height="24" Background="{DynamicResource MahApps.Brushes.Accent3}">
                            <DockPanel VerticalAlignment="Center">
                                <icons:PackIconMaterial Kind="CashRemove" Height="19" Margin="2.5,0"/>
                                <TextBlock Text="Drop out of auction" Margin="2.5,0"/>
                            </DockPanel>
                        </mah:Tile>
                        <TextBlock Text="{Binding NextAuctionPlayer.Balance, FallbackValue=Fetching the gavel..., StringFormat=£{0} available.}" FontWeight="SemiBold" VerticalAlignment="Center" Margin="3,0"/>
                        <Image Source="{Binding NextAuctionPlayer.Icon, Converter={StaticResource LobbyImageConverter}}" Height="32"/>
                    </DockPanel>
                </Viewbox>
            </Grid>
        </mah:Flyout>

        <!-- We need a flyout for trading -->
        <mah:Flyout x:Name="TradingFlyout" Header="Open new trading agreement" Width="400" Grid.RowSpan="30" Grid.ColumnSpan="30" DataContext="{Binding Handler}" Position="Left" Height="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=mah:MetroWindow}, Path=Background.ActualHeight}">
            <ScrollViewer>
                <Viewbox HorizontalAlignment="Left" VerticalAlignment="Top" Margin="10">
                    <StackPanel>
                        <!-- Content -->
                        <StackPanel Margin="10">
                            <TextBlock Text="{Binding CurrentPlayer.Name, StringFormat={}{0}\'s inventory}"/>
                            <ScrollViewer Height="200">
                                <ItemsControl ItemsSource="{Binding CurrentPlayer.Inventory, UpdateSourceTrigger=PropertyChanged}">
                                    <ItemsControl.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <StackPanel/>
                                        </ItemsPanelTemplate>
                                    </ItemsControl.ItemsPanel>
                                    <ItemsControl.ItemTemplate>
                                        <DataTemplate>
                                            <StackPanel Background="#252525" Margin="0,5,0,0">
                                                <TextBlock Text="{Binding Key}" Margin="5" FontStyle="Italic" Foreground="DarkGray"/>
                                                <TextBlock Text="no properties owned" FontSize="8" Foreground="DarkGray">
                                                    <TextBlock.Style>
                                                        <Style TargetType="{x:Type TextBlock}">
                                                            <Setter Property="Height" Value="0"/>
                                                            <Style.Triggers>
                                                                <DataTrigger Binding="{Binding Value.Count}" Value="0">
                                                                    <Setter Property="Height" Value="Auto"/>
                                                                    <Setter Property="Margin" Value="5,-5,5,0"/>
                                                                </DataTrigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </TextBlock.Style>
                                                </TextBlock>
                                                <ItemsControl ItemsSource="{Binding Value}">
                                                    <ItemsControl.ItemsPanel>
                                                        <ItemsPanelTemplate>
                                                            <StackPanel Margin="5,0,5,5"/>
                                                        </ItemsPanelTemplate>
                                                    </ItemsControl.ItemsPanel>
                                                    <!-- Allow for the selection of properties to trade -->
                                                    <ItemsControl.ItemTemplate>
                                                        <DataTemplate>
                                                            <Viewbox HorizontalAlignment="Left" Height="14">
                                                                <DockPanel>
                                                                    <!-- Styles! -->
                                                                    <DockPanel.Resources>
                                                                        <Style x:Key="DetailsStyle" TargetType="{x:Type TextBlock}">
                                                                            <Setter Property="FontSize" Value="10"/>
                                                                            <Setter Property="FontStyle" Value="Italic"/>
                                                                            <Setter Property="Foreground" Value="LightGray"/>
                                                                            <Setter Property="VerticalAlignment" Value="Bottom"/>
                                                                            <Setter Property="Margin" Value="0,0,0,1"/>
                                                                        </Style>
                                                                    </DockPanel.Resources>
                                                                    <CheckBox IsChecked="{Binding IsSelectedForTrade}" Content="{Binding Name}" Margin="0,0,5,0"/>
                                                                    <TextBlock Text="{Binding Price, StringFormat={}{0:c0}\,}" Style="{StaticResource DetailsStyle}"/>
                                                                    <TextBlock>
                                                                        <TextBlock.Style>
                                                                            <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource DetailsStyle}">
                                                                                <Setter Property="Text" Value=" unmortgaged"/>
                                                                                <Style.Triggers>
                                                                                    <DataTrigger Binding="{Binding IsMortgaged}" Value="True">
                                                                                        <Setter Property="Text" Value=" property mortgaged"/>
                                                                                        <Setter Property="Foreground" Value="#CCff0000"/>
                                                                                    </DataTrigger>
                                                                                </Style.Triggers>
                                                                            </Style>
                                                                        </TextBlock.Style>
                                                                    </TextBlock>
                                                                </DockPanel>
                                                            </Viewbox>
                                                        </DataTemplate>
                                                    </ItemsControl.ItemTemplate>
                                                </ItemsControl>
                                            </StackPanel>
                                        </DataTemplate>
                                    </ItemsControl.ItemTemplate>
                                </ItemsControl>
                            </ScrollViewer>
                            <DockPanel Margin="0,10,0,-10">
                                <Slider x:Name="CurrentPlayerCashSelector" Value="{Binding FromCurrentPlayerMoneyTrade}" Minimum="0" Maximum="{Binding CurrentPlayer.Balance}" TickFrequency="1" IsSnapToTickEnabled="True" Width="150"/>
                                <TextBlock Text="{Binding ElementName=CurrentPlayerCashSelector, Path=Value, UpdateSourceTrigger=PropertyChanged, StringFormat={}{0:c0}}" VerticalAlignment="Center" HorizontalAlignment="Right"/>
                            </DockPanel>

                        </StackPanel>
                        <!-- Trading partner selector -->
                        <StackPanel Margin="10" Width="200">
                            <TextBlock Text="Trading with" Foreground="DarkGray" FontSize="10"/>
                            <ListBox x:Name="PartnerSelector" SelectionMode="Single" ItemsSource="{Binding Players}" Grid.Column="1" HorizontalAlignment="Left">
                                <ListBox.ItemTemplate>
                                    <DataTemplate>
                                        <DockPanel LastChildFill="False" Width="190">
                                            <!-- Style! -->
                                            <DockPanel.Style>
                                                <Style TargetType="{x:Type DockPanel}">
                                                    <Style.Triggers>

                                                    </Style.Triggers>
                                                </Style>
                                            </DockPanel.Style>
                                            <DockPanel.Resources>
                                                <!-- Configure child appearances -->
                                                <Style TargetType="{x:Type TextBlock}">
                                                    <Setter Property="Foreground" Value="DarkGray"/>
                                                    <Setter Property="FontStyle" Value="Italic"/>
                                                    <Setter Property="FontSize" Value="10"/>
                                                    <Setter Property="VerticalAlignment" Value="Center"/>
                                                    <Setter Property="Margin" Value="0,0,5,0"/>
                                                </Style>
                                                <Style TargetType="{x:Type icons:PackIconMaterial}">
                                                    <Setter Property="Foreground" Value="DarkGray"/>
                                                    <Setter Property="VerticalAlignment" Value="Center"/>
                                                    <Setter Property="Height" Value="8"/>
                                                </Style>
                                            </DockPanel.Resources>
                                            <Image Source="{Binding Icon, Converter={StaticResource LobbyImageConverter}}" Width="16" Margin="0,0,5,0"/>
                                            <TextBlock Text="{Binding Name}" FontSize="14" FontStyle="Normal" Foreground="LightGray"/>
                                            <icons:PackIconMaterial Kind="CashMultiple"/>
                                            <TextBlock Text="{Binding Balance, StringFormat={}{0:c0}}"/>
                                            <icons:PackIconMaterial Kind="CardsOutline"/>
                                            <TextBlock Text="{Binding InventoryCount}"/>
                                        </DockPanel>
                                    </DataTemplate>
                                </ListBox.ItemTemplate>
                                <!-- Ensure you can't select yourself!!! Hide it when necessary! -->
                                <ListBox.ItemContainerStyle>
                                    <Style TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource MahApps.Styles.ListBoxItem}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Digit}" Value="-1">
                                                <Setter Property="Opacity" Value="0.5"/>
                                                <Setter Property="IsEnabled" Value="False"/>
                                            </DataTrigger>
                                            <DataTrigger Value="True">
                                                <DataTrigger.Binding>
                                                    <MultiBinding Converter="{StaticResource EqualityConverter}">
                                                        <Binding Path="Icon"/>
                                                        <Binding Path="DataContext.Handler.CurrentPlayer.Icon" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type mah:MetroWindow}}"/>
                                                    </MultiBinding>
                                                </DataTrigger.Binding>
                                                <Setter Property="Opacity" Value="0.5"/>
                                                <Setter Property="IsEnabled" Value="False"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </ListBox.ItemContainerStyle>
                            </ListBox>
                        </StackPanel>
                        <!-- Trading partner -->
                        <StackPanel Margin="10" Grid.Column="2" DataContext="{Binding ElementName=PartnerSelector, Path=SelectedItem, UpdateSourceTrigger=PropertyChanged}">
                            <!-- Hide if it's not appropriate -->
                            <StackPanel.Style>
                                <Style TargetType="{x:Type StackPanel}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding ElementName=PartnerSelector, Path=SelectedItem}" Value="{x:Null}">
                                            <Setter Property="Height" Value="0"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </StackPanel.Style>
                            <TextBlock Text="{Binding Name, StringFormat={}{0}\'s inventory, FallbackValue=Please select a trading partner}"/>
                            <ScrollViewer Height="200">
                                <ItemsControl ItemsSource="{Binding Inventory, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged}">
                                    <ItemsControl.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <StackPanel/>
                                        </ItemsPanelTemplate>
                                    </ItemsControl.ItemsPanel>
                                    <ItemsControl.ItemTemplate>
                                        <DataTemplate>
                                            <StackPanel Background="#252525" Margin="0,5,0,0">
                                                <TextBlock Text="{Binding Key}" Margin="5" FontStyle="Italic" Foreground="DarkGray"/>
                                                <TextBlock Text="no properties owned" FontSize="8" Foreground="DarkGray">
                                                    <TextBlock.Style>
                                                        <Style TargetType="{x:Type TextBlock}">
                                                            <Setter Property="Height" Value="0"/>
                                                            <Style.Triggers>
                                                                <DataTrigger Binding="{Binding Value.Count}" Value="0">
                                                                    <Setter Property="Height" Value="Auto"/>
                                                                    <Setter Property="Margin" Value="5,-5,5,0"/>
                                                                </DataTrigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </TextBlock.Style>
                                                </TextBlock>
                                                <ItemsControl ItemsSource="{Binding Value}">
                                                    <ItemsControl.ItemsPanel>
                                                        <ItemsPanelTemplate>
                                                            <StackPanel Margin="5,0,5,5"/>
                                                        </ItemsPanelTemplate>
                                                    </ItemsControl.ItemsPanel>
                                                    <!-- Allow for the selection of properties to trade -->
                                                    <ItemsControl.ItemTemplate>
                                                        <DataTemplate>
                                                            <Viewbox HorizontalAlignment="Left" Height="14">
                                                                <DockPanel>
                                                                    <!-- Styles! -->
                                                                    <DockPanel.Resources>
                                                                        <Style x:Key="DetailsStyle" TargetType="{x:Type TextBlock}">
                                                                            <Setter Property="FontSize" Value="10"/>
                                                                            <Setter Property="FontStyle" Value="Italic"/>
                                                                            <Setter Property="Foreground" Value="LightGray"/>
                                                                            <Setter Property="VerticalAlignment" Value="Bottom"/>
                                                                            <Setter Property="Margin" Value="0,0,0,1"/>
                                                                        </Style>
                                                                    </DockPanel.Resources>
                                                                    <CheckBox IsChecked="{Binding IsSelectedForTrade}" Content="{Binding Name}" Margin="0,0,5,0"/>
                                                                    <TextBlock Text="{Binding Price, StringFormat={}{0:c0}\,}" Style="{StaticResource DetailsStyle}"/>
                                                                    <TextBlock>
                                                                        <TextBlock.Style>
                                                                            <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource DetailsStyle}">
                                                                                <Setter Property="Text" Value=" unmortgaged"/>
                                                                                <Style.Triggers>
                                                                                    <DataTrigger Binding="{Binding IsMortgaged}" Value="True">
                                                                                        <Setter Property="Text" Value=" property mortgaged"/>
                                                                                        <Setter Property="Foreground" Value="#CCff0000"/>
                                                                                    </DataTrigger>
                                                                                </Style.Triggers>
                                                                            </Style>
                                                                        </TextBlock.Style>
                                                                    </TextBlock>
                                                                </DockPanel>
                                                            </Viewbox>
                                                        </DataTemplate>
                                                    </ItemsControl.ItemTemplate>
                                                </ItemsControl>
                                            </StackPanel>
                                        </DataTemplate>
                                    </ItemsControl.ItemTemplate>
                                </ItemsControl>
                            </ScrollViewer>
                            <DockPanel Margin="0,10,0,0">
                                <Slider x:Name="TradingPlayerCashSelector" Value="{Binding DataContext.Handler.ToCurrentPlayerMoneyTrade, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type mah:MetroWindow}}}" Minimum="0" Maximum="{Binding ElementName=PartnerSelector, Path=SelectedItem.Balance}" TickFrequency="1" IsSnapToTickEnabled="True" Width="150"/>
                                <TextBlock Text="{Binding ElementName=TradingPlayerCashSelector, Path=Value, UpdateSourceTrigger=PropertyChanged, StringFormat={}{0:c0}}" VerticalAlignment="Center" HorizontalAlignment="Right"/>
                            </DockPanel>
                        </StackPanel>
                        <!-- Trading finalising buttons -->
                        <TextBlock Text="Please ensure both players agree to this trade completely before continuing." FontSize="10" TextWrapping="Wrap" Width="200"/>
                        <TextBlock FontSize="8" Foreground="DarkGray" FontStyle="Italic" TextWrapping="Wrap" Width="200" Margin="0,5,0,10">
                            In addition to all selected properties, the current player will recieve
                            <Run Text="{Binding ElementName=TradingPlayerCashSelector, Path=Value, UpdateSourceTrigger=PropertyChanged, StringFormat={}{0:c0}}"/>
                            from their trading partner, and the trading partner
                            (<Run Text="{Binding ElementName=PartnerSelector, Path=SelectedItem.Name, FallbackValue=unselected}"/>)
                            will recieve
                            <Run Text="{Binding ElementName=CurrentPlayerCashSelector, Path=Value, UpdateSourceTrigger=PropertyChanged, StringFormat={}{0:c0}}"/>.
                        </TextBlock>
                        <Button Content="Close and complete trade" Command="{Binding Trade}" CommandParameter="{Binding ElementName=PartnerSelector, Path=SelectedItem}">
                            <!-- Hide if it's not appropriate -->
                            <Button.Style>
                                <Style TargetType="{x:Type Button}" BasedOn="{StaticResource MahApps.Styles.Button}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding ElementName=PartnerSelector, Path=SelectedItem}" Value="{x:Null}">
                                            <Setter Property="Visibility" Value="Hidden"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Button.Style>
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="Click">
                                    <i:ChangePropertyAction TargetName="TradingFlyout" PropertyName="IsOpen" Value="False"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </Button>
                    </StackPanel>
                </Viewbox>
            </ScrollViewer>
        </mah:Flyout>

        <!-- We need a flyout for rolling the dice -->
        <mah:Flyout x:Name="DiceRollFlyout" Grid.RowSpan="30" Grid.ColumnSpan="30" DataContext="{Binding Handler}" CloseButtonVisibility="Hidden" Width="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=mah:MetroWindow}, Path=ActualWidth}">
            <Grid Background="#22000000" Width="300" Margin="0,-80,0,0">
                <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
                    <StackPanel.Resources>
                        <Style TargetType="{x:Type DockPanel}">
                            <Setter Property="HorizontalAlignment" Value="Center"/>
                        </Style>
                        <Style TargetType="{x:Type TextBlock}">
                            <Setter Property="HorizontalAlignment" Value="Center"/>
                            <Setter Property="VerticalAlignment" Value="Center"/>
                        </Style>
                    </StackPanel.Resources>
                    <TextBlock Text="Ready to roll the dice?" FontSize="24"/>
                    <TextBlock Text="{Binding CurrentPlayer.Name, StringFormat=It is your turn to play\, {0}.}" FontSize="12"/>
                    <DockPanel>
                        <DockPanel.Resources>
                            <Style TargetType="{x:Type icons:PackIconFontAwesome}">
                                <Setter Property="Height" Value="64"/>
                                <Setter Property="Width" Value="64"/>
                                <Setter Property="Margin" Value="5,20"/>
                            </Style>
                        </DockPanel.Resources>
                        <icons:PackIconFontAwesome Kind="{Binding Roll.Item1, Converter={StaticResource DiceNumberConverter}}"/>
                        <icons:PackIconFontAwesome Kind="{Binding Roll.Item2, Converter={StaticResource DiceNumberConverter}}"/>
                    </DockPanel>
                    <DockPanel>
                        <DockPanel.Resources>
                            <Style TargetType="{x:Type mah:Tile}">
                                <Setter Property="Width" Value="125"/>
                                <Setter Property="Height" Value="32"/>
                                <Setter Property="Margin" Value="0"/>
                            </Style>
                            <Style TargetType="{x:Type icons:PackIconFontAwesome}">
                                <Setter Property="VerticalAlignment" Value="Center"/>
                            </Style>
                        </DockPanel.Resources>
                        <mah:Tile Command="{Binding RollDice}" IsEnabled="{Binding RollsComplete, UpdateSourceTrigger=PropertyChanged}" Width="90">
                            <i:Interaction.Triggers>
                                <i:TimerTrigger EventName="Click" MillisecondsPerTick="4000" TotalTicks="1">
                                    <i:ChangePropertyAction TargetName="DiceRollFlyout" PropertyName="IsOpen" Value="False"/>
                                </i:TimerTrigger>
                            </i:Interaction.Triggers>
                            <TextBlock FontSize="20" FontWeight="SemiBold">
                                    <icons:PackIconFontAwesome Kind="DiceD6Solid"/>
                                    Roll!
                            </TextBlock>
                        </mah:Tile>
                        <mah:Tile Background="Transparent" Foreground="DarkGray">
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="Click">
                                    <i:ChangePropertyAction TargetName="DiceRollFlyout" PropertyName="IsOpen" Value="False"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                            <TextBlock FontSize="20" FontStyle="Italic">
                                    <icons:PackIconFontAwesome Kind="TimesSolid"/>
                                    Go back
                            </TextBlock>
                        </mah:Tile>
                    </DockPanel>
                </StackPanel>
            </Grid>
        </mah:Flyout>

        <!-- When it is turn rollover, a flyout must be extended to allow for the screen to be covered (this is a hotseat game) -->
        <!-- To remain on top, this MUST be the last thing in the XAMl file -->
        <mah:Flyout x:Name="CoverFlyout" Grid.RowSpan="30" Grid.ColumnSpan="30" DataContext="{Binding Handler.CurrentPlayer}" IsOpen="{Binding DataContext.Handler.CoverOpen, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type mah:MetroWindow}}}" CloseButtonVisibility="Hidden" Position="Right" Width="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=mah:MetroWindow}, Path=ActualWidth}">
            <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,0,0,75">
                <DockPanel>
                    <StackPanel x:Name="NameholderPanel" VerticalAlignment="Center">
                        <TextBlock Text="{Binding Name}" TextAlignment="Right" FontSize="32"/>
                        <TextBlock Text="It's your turn to play." Foreground="LightGray" TextAlignment="Right" FontSize="16" Margin="2,0"/>
                        <TextBlock Foreground="LightGray" TextAlignment="Right" FontSize="16" Margin="2,0">
                                <Run Text="You currently have"/>
                                <Run Text="{Binding Balance, UpdateSourceTrigger=PropertyChanged, StringFormat=£{0}.}"/>
                        </TextBlock>
                    </StackPanel>
                    <Image Source="{Binding Icon, Converter={StaticResource LobbyImageConverter}}" Height="128" Margin="10"/>

                    <StackPanel VerticalAlignment="Center">
                        <mah:Tile Background="#252525" Margin="0,2.5" Height="32" MinWidth="125" HorizontalContentAlignment="Left" Width="{Binding ActualWidth, ElementName=NameholderPanel}">
                            <DockPanel Margin="10,0" HorizontalAlignment="Left">
                                <TextBlock Text="Take my turn " FontSize="16" VerticalAlignment="Center"/>
                                <icons:PackIconMaterial Kind="Play" VerticalAlignment="Center"/>
                            </DockPanel>
                            <!-- What to do if clicked? Close the flyout! -->
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="Click">
                                    <i:ChangePropertyAction TargetObject="{Binding ElementName=CoverFlyout}" PropertyName="IsOpen" Value="False"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </mah:Tile>
                        <Border Background="#252525" Margin="0,2.5" Height="32" MinWidth="125" Width="{Binding ActualWidth, ElementName=NameholderPanel}">
                            <CheckBox Margin="10,0" IsChecked="True" IsEnabled="False">
                                <TextBlock Text="Ready to go!" FontStyle="Italic" FontSize="16" VerticalAlignment="Center"/>
                            </CheckBox>
                        </Border>
                    </StackPanel>
                </DockPanel>
            </StackPanel>
        </mah:Flyout>

        <!--Game over flyout-->
        <mah:Flyout Grid.RowSpan="14" Grid.ColumnSpan="4" Position="Left" DataContext="{Binding Handler}" IsOpen="{Binding GameOver, FallbackValue=False, UpdateSourceTrigger=PropertyChanged}" CloseButtonVisibility="Hidden" Width="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=mah:MetroWindow}, Path=ActualWidth}">
            <Viewbox HorizontalAlignment="Center" VerticalAlignment="Center">
                <StackPanel Width="250">
                    <StackPanel.Resources>
                        <Style TargetType="{x:Type TextBlock}">
                            <Setter Property="Foreground" Value="DarkGray"/>
                            <Setter Property="HorizontalAlignment" Value="Center"/>
                            <Setter Property="VerticalAlignment" Value="Center"/>
                        </Style>
                        <Style TargetType="{x:Type DockPanel}">
                            <Setter Property="HorizontalAlignment" Value="Left"/>
                            <Setter Property="LastChildFill" Value="False"/>
                        </Style>
                    </StackPanel.Resources>
                    <TextBlock Text="Game over!" Foreground="White" HorizontalAlignment="Center"/>
                    <DockPanel HorizontalAlignment="Center">
                        <DockPanel.Resources>
                            <Style TargetType="{x:Type icons:PackIconMaterial}">
                                <Setter Property="HorizontalAlignment" Value="Center"/>
                                <Setter Property="Foreground" Value="DarkGray"/>
                                <Setter Property="Height" Value="4"/>
                                <Setter Property="Width" Value="10"/>
                            </Style>
                        </DockPanel.Resources>
                        <Image Source="{Binding CurrentPlayer.Icon, Converter={StaticResource LobbyImageConverter}}" Width="16"/>
                    </DockPanel>
                    <TextBlock FontSize="8" FontStyle="Italic" Foreground="DarkGray" HorizontalAlignment="Center">
                        Congratulations,
                        <Run Text="{Binding CurrentPlayer.Name}"/>!
                    </TextBlock>
                    <TextBlock Text="You have defeated your real-estate opponents." FontSize="4" Foreground="DarkGray" HorizontalAlignment="Center"/>
                    <Viewbox Width="30" Margin="0,5,0,0">
                        <Button Content="Close and end game" Style="{StaticResource MahApps.Styles.Button.Reveal}" Command="{Binding Exit}">
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="Click">
                                    <i:CallMethodAction MethodName="Close"
                                                  TargetObject="{Binding RelativeSource={RelativeSource
                                                  Mode=FindAncestor,
                                                  AncestorType=mah:MetroWindow}}" />
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </Button>
                    </Viewbox>
                </StackPanel>
            </Viewbox>
        </mah:Flyout>
                
    </Grid>

</mah:MetroWindow>
